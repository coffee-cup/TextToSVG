var onRun = function (context) {
  var documentName = context.document.displayName();
  //log('The current document is named: ' + documentName);

  var selectedLayers = context.selection;
  var selectedCount = selectedLayers.count();

  if (selectedCount == 0) {
    log('No layers are selected.');
  } else {
    for (var i = 0; i < selectedCount; i++) {
      var layer = selectedLayers[i];

      if ([layer class] == MSTextLayer) {
        handleText(context, layer);
      }
    }
  };
};

var copyPath = function (context) {
  var selectedLayers = context.selection;
  var selectedCount = selectedLayers.count();

  if (selectedCount == 0) {
    log('No layers are selected.');
  } else {
    for (var i = 0; i < selectedCount; i++) {
      var layer = selectedLayers[i];
      layer.setIsSelected(false);
      if ([layer class] == MSTextLayer) {
        var path = createSVGPath(layer.bezierPathWithTransforms());
        var pasteBoard = NSPasteboard.generalPasteboard();
        pasteBoard.declareTypes_owner([NSPasteboardTypeString], null);
        pasteBoard.setString_forType(path, NSPasteboardTypeString);
      }
    }
  };
}

var handleText = function (context, layer) {
  var text = layer.name();
  var fontPostscriptName = layer.fontPostscriptName();
  var fontSize = layer.fontSize();
  var textColor = layer.textColor();
  var textAlignment = layer.textAlignment();
  var characterSpacing = layer.characterSpacing()
  var lineSpacing = layer.lineSpacing();
  // log(text + " | " + fontPostscriptName + ' | ' + fontSize + 'px' + ' | ' + 'textColor');

  var parent = layer.parentGroup();
  var shape = MSShapeGroup.shapeWithBezierPath(layer.bezierPathWithTransforms());

  shape.style = layer.style();
  var style = shape.style();
  if (!style.fill()) {
    var fill = style.fills().addNewStylePart();
    fill.color = MSColor.colorWithNSColor(layer.style().textStyle().attributes().NSColor);
  }

  shape.name = layer.name();
  shape.setIsSelected(true);

  parent.addLayers([shape]);
}

var createSVGPath = function (path) {
  var bezierString = path.description();
  var lines = bezierString.split('\n');
  lines = lines.slice(3, lines.length);

  var svgPath = "";
  var numberReg = /(\d+\.\d+)/g;
  for (var i = 0; i < lines.length; i++) {
    var elemType = [path elementAtIndex: i];
    var points = lines[i].match(numberReg);

    if (elemType == 0 && points && points.length == 2) { // move to
      svgPath += "M" + points[0] + " " + points[1] + " ";
    } else if (elemType == 1 && points && points.length == 2) { // line to
      svgPath += "L" + points[0] + " " + points[1] + " ";
    } else if (elemType == 2 && points && points.length == 6) { // curve to
      svgPath += "C " + points[0] + " " + points[1] + ", " + points[2] + " " + points[3] + ", " +
        points[4] + " " + points[5] + " ";
    } else if (elemType == 3) { // close
      svgPath += "Z" + " ";
    }
  }
  return svgPath;
}

var handleGlyph = function (glyph, nsfont) {
  var path = [NSBezierPath bezierPath];
  [path moveToPoint: NSMakePoint(0, 0)];
  [path appendBezierPathWithGlyph: glyph inFont: nsfont];

  var bezierString = path.description();
  var lines = bezierString.split('\n');
  lines = lines.slice(3, lines.length);

  var svgPath = "";
  var numberReg = /(\d+\.\d+)/g;
  for (var i = 0; i < lines.length; i++) {
    var elemType = [path elementAtIndex: i];
    var points = lines[i].match(numberReg);

    if (elemType == 0 && points && points.length == 2) { // move to
      svgPath += "M" + points[0] + " " + points[1] + " ";
    } else if (elemType == 1 && points && points.length == 2) { // line to
      svgPath += "L" + points[0] + " " + points[1] + " ";
    } else if (elemType == 2 && points && points.length == 6) { // curve to
      svgPath += "C " + points[0] + " " + points[1] + ", " + points[2] + " " + points[3] + ", " +
        points[4] + " " + points[5] + " ";
    } else if (elemType == 3) { // close
      svgPath += "Z" + " ";
    }
  }
  return path;
}
